{
  "openapi": "3.0.0",
  "info": {
    "title": "OneForm API",
    "version": "v1",
    "description": "This specification defines all RESTful operations for the OneForm system, including provider templates, providers, provision templates, and provisions.\n"
  },
  "servers": [
    {
      "url": "http://oneform.example.server:{port}/api/v1",
      "description": "Default OneForm API server",
      "variables": {
        "port": {
          "default": "13013",
          "description": "Port where the OneForm API is listening",
          "enum": [
            "13013"
          ]
        }
      }
    }
  ],
  "tags": [
    {
      "name": "appliances",
      "description": "Manage provider drivers and their associated templates"
    },
    {
      "name": "provider-templates",
      "description": "Define and manage reusable provider configurations"
    },
    {
      "name": "providers",
      "description": "Control and monitor active provider instances"
    },
    {
      "name": "provision-templates",
      "description": "Create templates for provisioning infrastructure"
    },
    {
      "name": "provisions",
      "description": "Track and manage deployed infrastructure resources"
    }
  ],
  "paths": {
    "/apps": {
      "get": {
        "tags": [
          "appliances"
        ],
        "summary": "List available provider drivers",
        "description": "> Access to the appliance resource is restricted to users who are members of the oneadmin group.\n\nReturns a list of available provider drivers/appliances installed on the system.",
        "responses": {
          "200": {
            "description": "Array of installed drivers on the system",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Appliance"
                  }
                },
                "examples": [
                  {
                    "name": "AWS Provider",
                    "driver_name": "aws",
                    "description": "AWS driver for provisioning AWS resources",
                    "version": "1.0.0",
                    "path": "/usr/share/one/providers/aws",
                    "registered": true
                  }
                ]
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/apps/{name}": {
      "get": {
        "tags": [
          "appliances"
        ],
        "summary": "Get driver details",
        "description": "> Access to the appliance resource is restricted to users who are members of the oneadmin group.\n\nReturns metadata and configuration details for the specified provider driver.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Name of the provider driver"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of installed drivers on the system",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Appliance"
                },
                "example": {
                  "name": "AWS Provider",
                  "driver_name": "aws",
                  "description": "AWS driver for provisioning AWS resources",
                  "version": "1.0.0",
                  "path": "/usr/share/one/providers/aws",
                  "registered": true
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/apps/{name}/register": {
      "post": {
        "tags": [
          "appliances"
        ],
        "summary": "Register a new provider",
        "description": "> Access to the appliance resource is restricted to users who are members of the oneadmin group.\n\nRegisters a new provider from a local folder or from remote repository and creates its associated templates.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Name of the provider to register"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "source": {
                    "type": "string",
                    "enum": [
                      "system",
                      "repository"
                    ],
                    "default": "system"
                  },
                  "path": {
                    "type": "string",
                    "description": "Repository path (required if source is 'repository')"
                  }
                },
                "required": [
                  "source"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Provider and associated templates registered"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/apps/{name}/unregister": {
      "post": {
        "tags": [
          "appliances"
        ],
        "summary": "Unregister a provider",
        "description": "> Access to the appliance resource is restricted to users who are members of the oneadmin group.\n\nUnregisters a provider and deletes its associated templates.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Name of the provider to unregister"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Force deletion if provider data is incomplete"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Provider and templates deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/apps/{name}/chmod": {
      "post": {
        "tags": [
          "appliances"
        ],
        "summary": "Update permissions of provider and its templates",
        "description": "> Access to the appliance resource is restricted to users who are members of the oneadmin group.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Name of the provider"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "octet": {
                    "type": "string",
                    "description": "Permission octet (e.g. 640)"
                  }
                },
                "required": [
                  "octet"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Permissions updated"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/apps/{name}/chown": {
      "post": {
        "tags": [
          "appliances"
        ],
        "summary": "Change ownership of provider and its templates",
        "description": "> Access to the appliance resource is restricted to users who are members of the oneadmin group.\n\n",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Name of the provider"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_id": {
                    "type": "integer",
                    "description": "New user ID"
                  },
                  "group_id": {
                    "type": "integer",
                    "description": "New group ID"
                  }
                },
                "required": [
                  "owner_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ownership updated"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/apps/{name}/chgrp": {
      "post": {
        "tags": [
          "appliances"
        ],
        "summary": "Change group of provider and its templates",
        "description": "> Access to the appliance resource is restricted to users who are members of the oneadmin group.",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Name of the provider"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "group_id": {
                    "type": "integer",
                    "description": "New group ID"
                  }
                },
                "required": [
                  "group_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group updated"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/provider-templates": {
      "get": {
        "tags": [
          "provider-templates"
        ],
        "summary": "Retrieve all registered Provider templates",
        "responses": {
          "200": {
            "description": "Array of Provider templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProviderTemplate"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/provider-templates/{id}": {
      "get": {
        "tags": [
          "provider-templates"
        ],
        "summary": "Retrieve a specific Provider template by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the Provider template",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Provider template details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisionTemplate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/provider-templates/{id}/instantiate": {
      "post": {
        "tags": [
          "provider-templates"
        ],
        "summary": "Instantiate a new Provider from a Provider template",
        "description": "Instantiates a new Provider from the specified Provider template. The request body must be a JSON object containing any combination of:\n\n- `user_inputs_values`: a hash where keys are the names of the required user inputs defined in the template, and values are the user-provided values.\n- Any other key-value pairs: these will either overwrite existing fields in the template (e.g., `name`, `desc`) or extend the template with new attributes.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the Provider template to instantiate",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_inputs_values": {
                    "type": "object",
                    "required": true,
                    "description": "Hash object with the values for the Provider's template required user inputs"
                  }
                },
                "additionalProperties": {
                  "type": [
                    "string, ",
                    "number, ",
                    "boolean, ",
                    "array, ",
                    "object"
                  ]
                }
              },
              "example": {
                "name": "myprovider",
                "desc": "some description",
                "user_inputs_values": {
                  "access_key": "AKIAEXAMPLE",
                  "secret_key": "abc123secret",
                  "project_id": "demo-project"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Provider object created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provider"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/provision-templates": {
      "get": {
        "tags": [
          "provision-templates"
        ],
        "summary": "Retrieve all registered Provision templates",
        "responses": {
          "200": {
            "description": "Array of Provision templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProvisionTemplate"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/provision-templates/{id}": {
      "get": {
        "tags": [
          "provision-templates"
        ],
        "summary": "Retrieve a specific Provision template by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the Provision template",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Provision template details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvisionTemplate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/provision-templates/{id}/instantiate": {
      "post": {
        "tags": [
          "provision-templates"
        ],
        "summary": "Instantiate a new Provision from a Provision template",
        "description": "Creates a new Provision object based on a Provision template and an existing Provider instance.\n\nThe request body must include:\n\n- `provider_id`: the ID of the Provider instance that will host and manage the Provision.\n- `user_inputs_values`: a key-value object containing the values required by the Provision template's user inputs. Keys must match the input names defined in the template.\n\nIn addition to these fields, any other custom attributes can be included. These will overwrite or extend the values defined in the Provision template.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the Provision template to instantiate",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "provider_id": {
                    "type": "integer",
                    "required": true,
                    "description": "ID of the existing Provider object that will run the Provision"
                  },
                  "user_inputs_values": {
                    "type": "object",
                    "required": true,
                    "description": "Hash object with the values for the Provision's template required user inputs"
                  }
                },
                "additionalProperties": {
                  "type": [
                    "string, ",
                    "number, ",
                    "boolean, ",
                    "array, ",
                    "object"
                  ]
                }
              },
              "example": {
                "provider_id": 1,
                "name": "myprovision",
                "desc": "some description",
                "user_inputs_values": {
                  "instance_type": "c5.metal",
                  "instance_os_name": "ubuntu_2204",
                  "oneform_hosts": 2,
                  "oneform_public_ips": 1,
                  "oneform_tags": {
                    "environment": "dev",
                    "owner": "admin@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Provision object created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provision"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/providers": {
      "get": {
        "tags": [
          "providers"
        ],
        "summary": "Retrieve all Providers",
        "responses": {
          "200": {
            "description": "Array of Providers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Provider"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/providers/{id}": {
      "get": {
        "tags": [
          "providers"
        ],
        "summary": "Retrieve a specific Provider by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the Provider",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Provider object details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provider"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "providers"
        ],
        "summary": "Update a Provider with the given body",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the provider",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Provider"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Provider object updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provider"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "providers"
        ],
        "summary": "Delete a Provider by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the Provider",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/providers/{id}/path": {
      "get": {
        "tags": [
          "providers"
        ],
        "summary": "Retrieve the local path of the Provider",
        "description": "Returns the system path where all files related to the specified Provider are stored.\n\nThis path includes:\n\n- Terraform configuration files\n- Ansible playbooks and inventory\n- Other configuration files and parameters used during provisioning.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the provider",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Path to the Provider directory",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "description": "System path of the Provider"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/providers/{id}/chmod": {
      "post": {
        "tags": [
          "providers"
        ],
        "summary": "Change permissions of a Provider using an octet representation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the Provider",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "octet": {
                    "type": "string",
                    "required": true,
                    "description": "Octet permissions (e.g., '640')"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Provider object updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provider"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/providers/{id}/chown": {
      "post": {
        "tags": [
          "providers"
        ],
        "summary": "Changes the owner and optionally the group of a Provider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the Provider",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_id": {
                    "type": "integer",
                    "required": true,
                    "description": "New owner ID"
                  },
                  "group_id": {
                    "type": "integer",
                    "description": "New group ID"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Provider object updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provider"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/providers/{id}/chgrp": {
      "post": {
        "tags": [
          "providers"
        ],
        "summary": "Change the group of a Provider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the Provider",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "group_id": {
                    "type": "integer",
                    "required": true,
                    "description": "New group ID"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Provider object updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provider"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/provisions": {
      "get": {
        "tags": [
          "provisions"
        ],
        "summary": "Retrieve all provisions",
        "parameters": [
          {
            "name": "all",
            "in": "query",
            "required": false,
            "description": "If true, include Provisions in DONE state. False by default",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Provisions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Provision"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/provisions/{id}": {
      "get": {
        "tags": [
          "provisions"
        ],
        "summary": "Retrieve a specific Provision by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the Provision",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "decode",
            "in": "query",
            "required": false,
            "description": "If true, decode and return the Terraform state. False by default",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Provision object details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provision"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "provisions"
        ],
        "summary": "Update a Provision with the given body",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the Provision",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Provision"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Provision object updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provision"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "provisions"
        ],
        "summary": "Delete a Provision",
        "description": "Deletes a Provision from the OneForm database.\nBy default, only Provisions in the `DONE` state can be deleted. This ensures that active or in-progress resources are not removed unintentionally. However, if the optional `force=true` query parameter is provided, the deletion will proceed regardless of the Provision's current state. Use this option with caution, as it may bypass safety checks and result in inconsistent infrastructure state.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the provision",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "description": "Allow deletion regardless of state (default = false)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/provisions/{id}/unmanged": {
      "get": {
        "tags": [
          "provisions"
        ],
        "summary": "Retrieve unmanaged resources related to a Provision",
        "description": "Returns the list of unmanaged resources associated with a given Provision. Unmanaged resources are entities that were not deployed by OneForm, but are dependent on or linked to OneForm-managed infrastructure. For example, virtual machines, images, or leases created manually in OpenNebula but using storage, hosts, or networks managed by OneForm.\n\nThese resources are typically visible under the `child` field of each object in the full Provision body under `one_objects`, but this endpoint extracts and isolates them for easier tracking and auditing.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the Provision",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of unmanaged resources grouped by resource type",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "datastores": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "image": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "required": [
                          "image"
                        ]
                      }
                    },
                    "hosts": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "vms": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "required": [
                          "vms"
                        ]
                      }
                    },
                    "networks": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "vms": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "required": [
                          "vms"
                        ]
                      }
                    }
                  },
                  "example": {
                    "datastores": {
                      "107": {
                        "image": [
                          "4"
                        ]
                      }
                    },
                    "hosts": {
                      "6": {
                        "vms": [
                          "1",
                          "2"
                        ]
                      },
                      "7": {
                        "vms": [
                          "3"
                        ]
                      }
                    },
                    "networks": {
                      "10": {
                        "vms": [
                          "1",
                          "2"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/provisions/{id}/undeploy": {
      "post": {
        "tags": [
          "provisions"
        ],
        "summary": "Undeploy a Provision",
        "description": "Starts the undeployment (deprovisioning) process of a specific Provision.\n\nBy default, undeployment will fail if the Provision contains unmanaged resources; that is resources that were not deployed by OneForm but are linked to its managed infrastructure (e.g., manually created VMs or images).\n\nTo bypass this restriction and force undeployment despite the presence of unmanaged resources, include `force: true` in the request body.\n\nThis action triggers the teardown of all infrastructure associated with the Provision and removes its record from OpenNebula and the external provider.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the Provision",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Force undeployment even if unmanaged resources are detected"
                  }
                },
                "example": {
                  "force": true
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "description": "Undeployment not allowed due to unmanaged resources",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unmanaged resources found, use `force` option to delete them"
                    },
                    "context": {
                      "type": "object",
                      "description": "List of unmanaged resources preventing the undeployment"
                    }
                  },
                  "example": {
                    "message": "Unmanaged resources found, use `force` option to delete them",
                    "context": {
                      "hosts": {
                        "6": {
                          "vms": [
                            "1",
                            "2"
                          ]
                        }
                      },
                      "datastores": {
                        "107": {
                          "image": [
                            "4"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/provisions/{id}/recover": {
      "post": {
        "tags": [
          "provisions"
        ],
        "summary": "Recover a Provision from a failure state",
        "description": "Starts the recovery process for a specific Provision.\n\nThis endpoint allows restoring a Provision to a valid operational state (e.g., `RUNNING`) in case it has entered an error or inconsistent status. The `recover_state` field is required and indicates the target state to recover to.\n\nIf the Provision is currently in an error state, the optional `force: true` flag can be used to attempt recovery regardless of its current status.\n\nThis operation does not re-deploy the infrastructure, but rather updates the internal state tracking and may relink to existing resources depending on the provider's capabilities.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the Provision to recover",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "recover_state"
                ],
                "properties": {
                  "recover_state": {
                    "type": "string",
                    "description": "Target state to recover the Provision to (e.g., 'APPLYING')"
                  },
                  "force": {
                    "type": "boolean",
                    "description": "Force recovery even if the Provision is in an error state"
                  }
                },
                "example": {
                  "recover_state": "RUNNING",
                  "force": true
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/provisions/{id}/retry": {
      "post": {
        "tags": [
          "provisions"
        ],
        "summary": "Retry a failed Provision",
        "description": "Automatically retries the last failed operation associated with a Provision in error state.\n\nThis endpoint is intended for recovering failed Provisions by re-executing the most recent operation (e.g., scaling, deployment, update).\n\n- If the Provision is eligible for retry, OneForm will reattempt the operation.\n- The `force` flag can be set to `true` to force retry even when the Provision is not in a formally retryable state.\n- The `opts` object allows passing custom parameters to the retried operation. For example, if the failure occurred during a scaling action, you can include the original scaling body in `opts` to retry with adjusted values.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the Provision to retry",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "force": {
                    "type": "boolean",
                    "description": "Force retry even if the Provision is not in a retryable state"
                  },
                  "opts": {
                    "type": "object",
                    "description": "Optional parameters to pass to the retried operation",
                    "additionalProperties": {
                      "type": [
                        "string",
                        "number",
                        "boolean",
                        "array",
                        "object"
                      ]
                    }
                  }
                }
              },
              "examples": {
                "retryScaling": {
                  "summary": "Retry a failed scaling operation with updated parameters",
                  "value": {
                    "force": false,
                    "opts": {
                      "direction": "up",
                      "nodes": 2
                    }
                  }
                },
                "retryAppling": {
                  "summary": "Retry a failed applying operation",
                  "value": {}
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/provisions/{id}/scale": {
      "post": {
        "tags": [
          "provisions"
        ],
        "summary": "Scale a Provision",
        "description": "Triggers the scaling process for a given Provision, either to add or remove infrastructure resources.\n- The `direction` field must be either `up` (to scale out) or `down` (to scale in).\n- The `nodes` field accepts two formats:\n    - An **integer**, representing the number of nodes to scale (used for external or dynamic providers).\n    - An **array of IP addresses**, used only when the Provision is based on the `onpremises` provider. In this case, you must explicitly provide the IPs of the physical nodes to be added or removed.\n\nAdditionally, the optional `opts` field allows specifying extra OpenNebula resources to deprovision during a scale down operation. This can include:\n- `datastores`: list of datastore IDs to remove from the Provision\n- `networks`: list of network IDs to remove\n> It is recommended to manage non-host OpenNebula resources (e.g., networks, datastores) directly via their corresponding object endpoints. The `opts` field should only be used for coordinated removal during deprovisioning when absolutely necessary.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the Provision to scale",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "direction",
                  "nodes"
                ],
                "properties": {
                  "direction": {
                    "type": "string",
                    "enum": [
                      "up",
                      "down"
                    ],
                    "description": "Scaling direction: 'up' to add nodes, 'down' to remove"
                  },
                  "nodes": {
                    "description": "Defines the nodes involved in the scaling operation. The format depends on the direction and provider:\n\n- For `up` with external providers: an integer indicating the number of nodes to add.\n- For `up` with the on-premises provider: an array of IP addresses of physical hosts.\n- For `down` operations (any provider): an array of OpenNebula host IDs to remove.",
                    "oneOf": [
                      {
                        "type": "integer",
                        "minimum": 1,
                        "description": "Number of nodes to add (only used when direction is 'up' with non-onpremises providers)"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": "ipv4"
                        },
                        "description": "IP addresses of physical nodes to add (used only when direction is 'up' and provider is onpremises)"
                      },
                      {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "IDs of OpenNebula hosts to remove (used only when direction is 'down')"
                      }
                    ]
                  },
                  "opts": {
                    "type": "object",
                    "description": "Optional additional resources to deprovision (only valid when scaling down)",
                    "properties": {
                      "datastores": {
                        "type": "array",
                        "items": {
                          "type": "integer"
                        }
                      },
                      "networks": {
                        "type": "array",
                        "items": {
                          "type": "integer"
                        }
                      }
                    },
                    "additionalProperties": true
                  }
                }
              },
              "examples": {
                "scaleUp": {
                  "summary": "Scale up by adding two nodes (external provider)",
                  "value": {
                    "direction": "up",
                    "nodes": 2
                  }
                },
                "scaleUpOnPremises": {
                  "summary": "Scale up by adding two on-premises nodes using IPs",
                  "value": {
                    "direction": "up",
                    "nodes": [
                      "1.1.1.1",
                      "2.2.2.2"
                    ]
                  }
                },
                "scaleDownWithOpts": {
                  "summary": "Scale down with node list and extra resources",
                  "value": {
                    "direction": "down",
                    "nodes": [
                      3,
                      4
                    ],
                    "opts": {
                      "datastores": [
                        107
                      ],
                      "networks": [
                        10
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/400"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/provisions/{id}/add-ip": {
      "post": {
        "tags": [
          "provisions"
        ],
        "summary": "Add public IPs to a Provision",
        "description": "Adds one or more public IP addresses to the public network associated with a Provision.\n\nBy default, one IP address will be added unless a different `amount` is specified in the request body.\n\nThis operation updates the Provision's network allocation using the underlying OpenNebula elastic drivers.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the Provision",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "integer",
                    "minimum": 1,
                    "default": 1,
                    "description": "Number of public IPs to add (default is 1)"
                  }
                }
              },
              "examples": {
                "addOneIP": {
                  "summary": "Add one public IP",
                  "value": {}
                },
                "addThreeIPs": {
                  "summary": "Add three public IPs",
                  "value": {
                    "amount": 3
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/provisions/{id}/remove-ip": {
      "post": {
        "tags": [
          "provisions"
        ],
        "summary": "Remove a public IP from a Provision",
        "description": "Removes a specific public IP address from the public network associated with the given Provision.\n\nThis operation targets the **Address Range ID (AR ID)** assigned to the IP you want to remove. The `ar_id` must be provided in the request body.\n\nOnce removed, the IP is released from the provisioned network in OpenNebula.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the Provision",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "ar_id"
                ],
                "properties": {
                  "ar_id": {
                    "type": "integer",
                    "description": "Address Range (AR) ID of the public IP to remove"
                  }
                }
              },
              "examples": {
                "removeIP": {
                  "summary": "Remove a public IP by AR ID",
                  "value": {
                    "ar_id": 42
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/provisions/{id}/chmod": {
      "post": {
        "tags": [
          "provisions"
        ],
        "summary": "Change permissions of a Provision using an octet representation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the Provision",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "octet": {
                    "type": "string",
                    "required": true,
                    "description": "Octet permissions (e.g., '640')"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Provision object updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provision"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/provisions/{id}/chown": {
      "post": {
        "tags": [
          "provisions"
        ],
        "summary": "Changes the owner and optionally the group of a Provision",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the Provision",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "owner_id": {
                    "type": "integer",
                    "required": true,
                    "description": "New owner ID"
                  },
                  "group_id": {
                    "type": "integer",
                    "description": "New group ID"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Provision object updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provision"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/provisions/{id}/chgrp": {
      "post": {
        "tags": [
          "provisions"
        ],
        "summary": "Change the group of a Provision",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the Provision",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "group_id": {
                    "type": "integer",
                    "required": true,
                    "description": "New group ID"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Provision object changed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provision"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/provisions/{id}/logs": {
      "get": {
        "tags": [
          "provisions"
        ],
        "summary": "Stream logs for a provision",
        "description": "Streams logs of a specific provision in Server-Sent Events (SSE) format. Each log line is parsed and emitted with a log level (`event`) and message (`data`). Supported levels are: `info`, `debug`, `error`, `warn`.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the provision"
          },
          {
            "name": "all",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "If true, stream the full log file without pagination"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            },
            "description": "Page number of log lines to return (ignored if all=true)"
          },
          {
            "name": "per_page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 1
            },
            "description": "Number of log lines per page (ignored if all=true)"
          }
        ],
        "responses": {
          "200": {
            "description": "Logs streamed successfully",
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "description": "Stream of log events in Server-Sent Events format"
                },
                "examples": {
                  "sseLogs": {
                    "summary": "Sample SSE stream with log events",
                    "value": "event: info\ndata: [I] Provision started\n\nevent: warn\ndata: [W] Some warning message\n\nevent: error\ndata: [E] Provision failed due to timeout\n\nevent: debug\ndata: [D] Internal processing complete\n\n"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Provision not found"
          },
          "500": {
            "description": "Internal server error while reading the log file"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Appliance": {
        "type": "object",
        "description": "Representation of a provider driver available in the system.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name of the appliance"
          },
          "driver_name": {
            "type": "string",
            "description": "Internal name of the provider driver"
          },
          "description": {
            "type": "string",
            "description": "Short description of the appliance"
          },
          "version": {
            "type": "string",
            "description": "Version of the appliance driver"
          },
          "path": {
            "type": "string",
            "description": "Absolute system path to the appliance folder"
          },
          "registered": {
            "type": "boolean",
            "description": "Indicates if the appliance is currently registered in OneForm"
          }
        },
        "required": [
          "name",
          "driver_name",
          "version",
          "path",
          "registered"
        ]
      },
      "OpenNebulaJSONDocument": {
        "type": "object",
        "description": "Generic representation of an OpenNebula JSON document, which includes metadata and body information.",
        "properties": {
          "DOCUMENT": {
            "type": "object",
            "properties": {
              "ID": {
                "type": "string",
                "description": "ID of the resource in OpenNebula"
              },
              "UID": {
                "type": "string",
                "description": "User ID"
              },
              "GID": {
                "type": "string",
                "description": "Group ID"
              },
              "UNAME": {
                "type": "string",
                "description": "Username"
              },
              "GNAME": {
                "type": "string",
                "description": "Group name"
              },
              "NAME": {
                "type": "string",
                "description": "Name of the object"
              },
              "TYPE": {
                "type": "string",
                "description": "Type identifier of the object"
              },
              "PERMISSIONS": {
                "type": "object",
                "description": "Permission bits for the object (U: Use, M: Manage, A: Admin)",
                "properties": {
                  "OWNER_U": {
                    "type": "string",
                    "enum": [
                      "0",
                      "1"
                    ]
                  },
                  "OWNER_M": {
                    "type": "string",
                    "enum": [
                      "0",
                      "1"
                    ]
                  },
                  "OWNER_A": {
                    "type": "string",
                    "enum": [
                      "0",
                      "1"
                    ]
                  },
                  "GROUP_U": {
                    "type": "string",
                    "enum": [
                      "0",
                      "1"
                    ]
                  },
                  "GROUP_M": {
                    "type": "string",
                    "enum": [
                      "0",
                      "1"
                    ]
                  },
                  "GROUP_A": {
                    "type": "string",
                    "enum": [
                      "0",
                      "1"
                    ]
                  },
                  "OTHER_U": {
                    "type": "string",
                    "enum": [
                      "0",
                      "1"
                    ]
                  },
                  "OTHER_M": {
                    "type": "string",
                    "enum": [
                      "0",
                      "1"
                    ]
                  },
                  "OTHER_A": {
                    "type": "string",
                    "enum": [
                      "0",
                      "1"
                    ]
                  }
                }
              },
              "TEMPLATE": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Provider"
                  },
                  {
                    "$ref": "#/components/schemas/ProviderTemplate"
                  },
                  {
                    "$ref": "#/components/schemas/Provision"
                  },
                  {
                    "$ref": "#/components/schemas/ProvisionTemplate"
                  }
                ]
              }
            }
          }
        },
        "required": [
          "DOCUMENT"
        ]
      },
      "ProviderTemplate": {
        "type": "object",
        "properties": {
          "PROVIDER_BODY": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Short identifier for the cloud provider"
              },
              "description": {
                "type": "string",
                "description": "Detailed explanation of the provider’s purpose"
              },
              "version": {
                "type": "string",
                "description": "Version of the provider template"
              },
              "fireedge": {
                "type": "object",
                "description": "FireEdge metadata"
              },
              "cloud_provider": {
                "type": "string",
                "description": "Provider code (e.g., aws, azure)"
              },
              "connection": {
                "type": "object",
                "description": "Hash with provider connection attributes"
              },
              "user_inputs": {
                "type": "array",
                "description": "User Inputs requested to the user during instantation time",
                "items": {
                  "$ref": "#/components/schemas/UserInput"
                }
              },
              "registration_time": {
                "type": "integer",
                "format": "int64",
                "description": "Unix timestamp of when the template was registered"
              }
            }
          }
        }
      },
      "Provider": {
        "type": "object",
        "properties": {
          "PROVIDER_BODY": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Short identifier for the cloud provider"
              },
              "description": {
                "type": "string",
                "description": "Detailed explanation of the provider’s purpose"
              },
              "cloud_provider": {
                "type": "string",
                "description": "Provider code (e.g., aws, azure)"
              },
              "version": {
                "type": "string",
                "description": "Version of the provider definition"
              },
              "fireedge": {
                "type": "object",
                "description": "FireEdge metadata"
              },
              "connection": {
                "type": "object",
                "description": "Hash with provider connection attributes"
              },
              "provision_ids": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "List of provision IDs associated with this provider"
              },
              "registration_time": {
                "type": "integer",
                "format": "int64",
                "description": "Unix timestamp of when the provider was instantiated"
              }
            }
          }
        }
      },
      "ProvisionTemplate": {
        "type": "object",
        "properties": {
          "PROVISION_BODY": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Short identifier for the provisioning workflow"
              },
              "description": {
                "type": "string",
                "description": "Detailed explanation of what the provision does"
              },
              "fireedge": {
                "type": "object",
                "description": "FireEdge metadata"
              },
              "user_inputs": {
                "type": "array",
                "description": "User Inputs requested to the user during instantation time",
                "items": {
                  "$ref": "#/components/schemas/UserInput"
                }
              },
              "cloud_provider": {
                "type": "string",
                "description": "Underlying cloud provider code (e.g., aws)"
              },
              "one_objects": {
                "type": "object",
                "description": "Definitions of OpenNebula objects that the provisioning will create, including clusters, hosts, networks, and datastores.\n",
                "additionalProperties": true
              },
              "deployment_file": {
                "type": "string",
                "description": "Filename (without extension) of the Terraform/Ansible workflow"
              },
              "version": {
                "type": "string",
                "description": "Version of the provision template"
              },
              "registration_time": {
                "type": "integer",
                "format": "int64",
                "description": "Unix timestamp of when the template was registered"
              }
            }
          }
        }
      },
      "Provision": {
        "type": "object",
        "properties": {
          "PROVISION_BODY": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Short identifier for the provisioning workflow"
              },
              "description": {
                "type": "string",
                "description": "Detailed explanation of what the provision does"
              },
              "deployment_file": {
                "type": "string",
                "description": "Workflow filename (without extension)"
              },
              "fireedge": {
                "type": "object",
                "description": "FireEdge metadata"
              },
              "user_inputs": {
                "type": "array",
                "description": "User Inputs requested to the user during instantation time",
                "items": {
                  "$ref": "#/components/schemas/UserInput"
                }
              },
              "user_inputs_values": {
                "type": "object",
                "description": "Actual values provided by the user for each input parameter, used during provisioning.",
                "additionalProperties": true
              },
              "provider_id": {
                "type": "integer",
                "description": "ID of the associated provider"
              },
              "state": {
                "type": "string",
                "description": "Current state of the provisioning lifecycle"
              },
              "one_objects": {
                "type": "object",
                "description": "Detailed representation of OpenNebula objects created by the Provision. Includes cluster, hosts, networks, and datastores, each with their OpenNebula ID, name, and template definition.",
                "properties": {
                  "cluster": {
                    "type": "object",
                    "description": "OpenNebula cluster used or created for the provision",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "OpenNebula ID of the cluster"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the cluster in OpenNebula"
                      },
                      "template": {
                        "type": "object",
                        "description": "Key-value map representing the OpenNebula template for the cluster",
                        "additionalProperties": true
                      }
                    }
                  },
                  "hosts": {
                    "type": "array",
                    "description": "List of OpenNebula hosts",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "OpenNebula ID of the host"
                        },
                        "name": {
                          "type": "string",
                          "description": "Name of the host in OpenNebula"
                        },
                        "template": {
                          "type": "object",
                          "description": "Template attributes for the host",
                          "additionalProperties": true
                        }
                      }
                    }
                  },
                  "networks": {
                    "type": "array",
                    "description": "List of OpenNebula virtual networks",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "OpenNebula ID of the network"
                        },
                        "name": {
                          "type": "string",
                          "description": "Name of the network in OpenNebula"
                        },
                        "template": {
                          "type": "object",
                          "description": "Template attributes for the network",
                          "additionalProperties": true
                        }
                      }
                    }
                  },
                  "datastores": {
                    "type": "array",
                    "description": "List of OpenNebula datastores",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "OpenNebula ID of the datastore"
                        },
                        "name": {
                          "type": "string",
                          "description": "Name of the datastore in OpenNebula"
                        },
                        "template": {
                          "type": "object",
                          "description": "Template attributes for the datastore",
                          "additionalProperties": true
                        }
                      }
                    }
                  }
                }
              },
              "registration_time": {
                "type": "integer",
                "format": "int64",
                "description": "Unix timestamp of when the provision was instantiated"
              },
              "historic": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "action": {
                      "type": "string",
                      "description": "Description of the historic action"
                    },
                    "description": {
                      "type": "string",
                      "description": "Detailed explanation of the state change or event"
                    },
                    "time": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Unix timestamp of the historic event"
                    }
                  }
                }
              },
              "tags": {
                "type": "object",
                "description": "Arbitrary key-value pairs assigned to the provision",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "UserInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Identifier of the input parameter"
          },
          "description": {
            "type": "string",
            "description": "Human-readable explanation of the input parameter"
          },
          "type": {
            "type": "string",
            "description": "Data type of the input",
            "enum": [
              "string",
              "number",
              "bool",
              "list",
              "map(*any)"
            ]
          },
          "default": {
            "description": "Default value for the input",
            "type": "string",
            "enum": [
              "string",
              "number",
              "bool",
              "list",
              "map(*any)"
            ]
          },
          "component": {
            "type": "string",
            "description": "Indicates whether the parameter is used by Terraform or Ansible"
          },
          "match": {
            "type": "object",
            "description": "Validation rules for the input parameter",
            "properties": {
              "type": {
                "type": "string",
                "description": "Type of match (e.g., list, number)",
                "enum": [
                  "string",
                  "number",
                  "list",
                  "map"
                ]
              },
              "values": {
                "description": "Enumerated values or range constraints",
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  {
                    "type": "object",
                    "description": "For numeric ranges or grouped constraints"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "responses": {
      "200": {
        "description": "The request has succeeded"
      },
      "201": {
        "description": "Request was successful and a new resource has been created"
      },
      "202": {
        "description": "The request has been accepted for processing but the processing has not been completed"
      },
      "204": {
        "description": "The request has been accepted for processing but no info in the response"
      },
      "400": {
        "description": "Malformed syntax"
      },
      "401": {
        "description": "Bad authentication"
      },
      "403": {
        "description": "Bad authorization"
      },
      "404": {
        "description": "Resource not found"
      },
      "500": {
        "description": "The server encountered an unexpected condition which prevented it from fulfilling the request."
      },
      "501": {
        "description": "The functionality requested is not supported."
      }
    }
  }
}